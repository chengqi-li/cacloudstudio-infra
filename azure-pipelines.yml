# primary ADO pipeline
# primary ADO pipeline
# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - main

variables:
  TF_CLOUD_ORGANIZATION: CaCloudStudio
  TF_WORKSPACE: Infra
  TF_DIR: terraform
  TF_VAR_DIR: web

stages:
  - stage: Terraform
    jobs:
      - job: TerraformCI
        displayName: "Terraform Plan and Apply"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - checkout: self

          - script: |
              echo "Branch: $(Build.SourceBranch)"
              echo "Repo directory: $(Build.SourcesDirectory)"
              ls -al $(Build.SourcesDirectory)
              echo "---"
              ls -al $(Build.SourcesDirectory)/terraform || echo "No terraform directory found"
            displayName: "Check repo and terraform directory"

          - task: Bash@3
            inputs:
              targetType: "inline"
              script: |
                cd ..
                mkdir -p $HOME/bin

                echo "Home:"
                echo $HOME

                curl -# -L https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip -o terraform.zip

                unzip terraform.zip

                ls -al
                ls ./terraform

                echo "Updating PATH..."
                mv ./terraform $HOME/bin/
                echo "##vso[task.prependpath]$HOME/bin"
                terraform -v
                echo "Terraform installed."
            displayName: "Install Terraform"

          - task: AzureCLI@2
            displayName: "Azure Login for Terraform"
            inputs:
              azureSubscription: "ADO Pipeline Connection" # name of the Azure Resource Manager service connection
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                echo "Azure login completed."
                echo "servicePrincipalId=${servicePrincipalId}"
                echo "subscriptionId=${subscriptionId}"
                echo "All Environment variables"
                env
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]${servicePrincipalId}"
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;isOutput=true]${servicePrincipalKey}"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]${subscriptionId}"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]${tenantId}"
                echo "ARM_TENANT_ID=$(ARM_TENANT_ID)"
                echo "ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)"
              addSpnToEnvironment: true

          - task: Bash@3
            name: TerraformPlan
            inputs:
              targetType: "inline"
              script: |
                echo "Test for Az CLI environment variables"
                echo $ARM_CLIENT_ID
                echo $ARM_SUBSCRIPTION_ID
                echo $ARM_TENANT_ID
                cd $(Build.SourcesDirectory)
                ls -al
                pwd
                terraform --version
                echo "Initializing Terraform with remote backend"
                cd $(Build.SourcesDirectory)/$(TF_DIR)
                pwd
                ls -al
                terraform init
                terraform plan -var-file=tfvars/$(TF_VAR_DIR)/$(TF_VAR_DIR).tfvars -out=tfplan
            env:
              TF_TOKEN_app_terraform_io: $(TERRAFORM_TOKEN)
              ARM_CLIENT_ID: $(AzureLogin.ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AzureLogin.ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AzureLogin.ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AzureLogin.ARM_TENANT_ID)
            displayName: "Terraform Plan"

          - task: Bash@3
            name: TerraformApply
            inputs:
              targetType: "inline"
              script: |
                cd $(Build.SourcesDirectory)/$(TF_DIR)
                echo "All files under directory here."
                ls -al

                echo "Test terraform versioning"
                terraform -v
                terraform apply main.tfplan
            env:
              TF_TOKEN_app_terraform_io: $(TERRAFORM_TOKEN)
              ARM_CLIENT_ID: $(AzureLogin.ARM_CLIENT_ID)
              ARM_CLIENT_SECRET: $(AzureLogin.ARM_CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(AzureLogin.ARM_SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(AzureLogin.ARM_TENANT_ID)
